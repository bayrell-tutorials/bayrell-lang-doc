/*!
 *  Bayrell Documentation
 *
 *  (c) Copyright 2019-2020 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace App.UI;

use Runtime.MessageRPC;
use Runtime.Web.Component;
use Runtime.Web.LayoutModel;
use Runtime.Web.RenderContainer;
use Runtime.Web.RenderHelper;
use Runtime.Web.Annotations.Route;
use Runtime.Web.Annotations.RouteList;
use Runtime.Web.Annotations.Template;
use App.Models.Document;
use App.UI.IndexPageModel;


@RouteList{}
@Template{ "model_name": classof IndexPageModel }
class IndexPage extends Component
{
	
	/**
	 * Returns module name
	 */
	lambda string moduleName() => "App";
	
	
	
	/**
	 * Route Action
	 * @return WebContainer
	 */
	@Route{ "uri": "/" }
	static async RenderContainer IndexPage(RenderContainer container)
	{
		MessageRPC msg = await @->sendMessage
		(
			new MessageRPC
			{
				"api_name": "App",
				"space_name": "ApiInterface",
				"method_name": "getDocument",
				"data":
				{
					"document": "main/index",
				},
			}
		);
		
		string title = "";
		Document document = msg->isSuccess() ? msg.response : null;
		if (document)
		{
			title = document.title;
		}
		
		IndexPageModel model = new IndexPageModel
		{
			"current_page": "main",
			"document": document,
		};
		
		/* Set title */
		container <= layout <= title <= "Документация";
		
		/* Create model */
		container <= layout <= page_class <= classof IndexPage;
		container <= layout <= page_model <= model;
		container <= layout <= f_inc <= 10;
		
		return container;
	}
	
	
	
	/**
	 * Returns required components
	 */
	lambda Collection<string> components() =>
	[
	];
	
	
	
	/**
	 * Component css
	 */
	lambda string css(Dict<string> vars) =>
		@css{
			%content{
			}
			%content p{
			}
		}
	;
	
	
	
	/**
	 * Component render
	 */
	lambda html render(LayoutModel layout, IndexPageModel model, Dict params, html content) =>
	
		<div @class='content' @key='content'>
			@raw{ model.document != null ? model.document.content : "Страница не найдена" }
		</div>
		
	;
	
	
}